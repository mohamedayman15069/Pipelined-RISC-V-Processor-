module InstMem (input [5:0] addr, output [31:0] data_out);

    reg [31:0] mem [0:63];
    initial begin        
        mem[0] = 32'b00000000000000000010000010000011;          //lw x1, 0(x0)
        mem[1] = 32'b000000000100_00000_010_00010_0000011;      //lw x2, 4(x0)
        mem[2] = 32'b00000001111000011000000110010011;          //addi x3, x3, 30
        mem[3] = 32'b111111111011_00011_000_00011_0010011;      //addi x3, x3, -5
        mem[4] = 32'b00000000001000001110001000110011;          //or x4, x1, x2
        mem[5] = 32'b0_000000_00011_00100_000_0100_0_1100011;   //beq x4, x3, 4
        mem[6] = 32'b00000000001000001000000010110011;          //add x1, x1, x2
        mem[7] = 32'b00000000010000000010011000100011;          //sw x4, 12(x0)
        mem[8] = 32'b000000001100_00000_010_00100_0000011 ;     //lw x4, 12(x0) //25
        mem[9] = 32'b00000000000000000101001010110111;          //lui x5, 5
        mem[10] = 32'b00000000000000000111001100010111;         //auipc x6, 7
        mem[11] = 32'b0_00000_00100_0_00000000_01001_1101111;   //jal x9, 4
        mem[12] = 32'b00000000010100000000001110010011;         //addi x7, x0, 5
        mem[13] = 32'b0000000_01001_00000_010_10000_0100011;    //sw x9, 16(x0)
        mem[14] = 32'b00000000000100100000001000010011;         //addi x4, x4, 1    
        mem[15] = 32'b00000001100_00000_000_01000_0000011;      // lb x8,12(x0) 
        mem[16] = 32'b00000001100_00000_000_01010_0000011;      // lh x10,12(x0)       
    end 

    assign data_out = mem[addr];

endmodule